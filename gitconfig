[user]
  name = "Leonardo Godoy"
  email = "leonardoggavellar@gmail.com"
  username = "L30Bola"
  signingkey = CFF266C3E04E6AD6
[core]
  editor = vim
  pager = "delta"
[web]
  browser = google-chrome-stable
[commit]
  gpgSign = true
[interactive]
  diffFilter = delta --color-only
[delta]
  navigate = true
  light = false
  pager = less
  line-numbers = true
[merge]
  conflictstyle = diff3
[diff]
  colorMoved = default

[url "git@git.topfreegames.com:"]
  insteadOf = https://git.topfreegames.com/
  insteadOf = https://git.topfreegames.com:443/
  insteadOf = http://git.topfreegames.com/
  insteadOf = http://git.topfreegames.com:80/
  insteadOf = git::http://git.topfreegames.com/
  insteadOf = http://git@git.topfreegames.com/

[includeIf "gitdir:~/projetos/"]
  path = ~/.vim/gitconfigs/wls
[includeIf "gitdir:/srv/godoy/projetos/"]
  path = ~/.vim/gitconfigs/wls
[includeIf "gitdir:~/ghorg/"]
  path = ~/.vim/gitconfigs/wls
[includeIf "gitdir:~/projetos/local/"]
  path = ~/.vim/gitconfigs/wls
[includeIf "gitdir:~/scripts"]
  path = ~/.vim/gitconfigs/wls

[alias]
  com = "!com() { \
    local main_branch; \
    main_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p'); \
    git checkout ${main_branch}; \
  }; com"

  k = "!k() { \
    set +x; \
    git com; \
    git pu; \
    set -x; \
  }; k"

  mm = "!mm() { \
    set +x; \
    local main_branch; \
    main_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p'); \
    git merge --ff ${main_branch}; \
    set -x; \
  }; mm"

  n = "!n() { \
    set +x; \
    local last_branch; \
    last_branch=$(git rev-parse --abbrev-ref HEAD); \
    local main_branch; \
    main_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p'); \
    git k; \
    git checkout ${last_branch}; \
    git merge ${main_branch}; \
    set -x; \
  }; n"

  pou = "!pou() { \
    set +x; \
    local actual_branch; \
    actual_branch=$(git rev-parse --abbrev-ref HEAD); \
    git p -u origin ${actual_branch}; \
    set -x; \
  }; pou"

  pp = "!pp() { \
    set +x; \
    local commit_message; \
    commit_message=$(git pou 2>&1); \
    echo \"$commit_message\"; \
    local url; \
    url=$(grep -A1 'To create a merge request for' <<< ${commit_message} | grep http | awk '{ print $2 }'); \
    if [[ -z ${url} ]]; then \
      url=$(grep -A1 'View merge request for' <<< ${commit_message} | grep http | awk '{ print $2 }'); \
    fi; \
    xdg-open ${url} | cat; \
    set -x; \
  }; pp"

  stk = "!stk() { \
    set +x; \
    git st; \
    git k; \
    git st pop; \
  }; stk"

  a = "add"
  b = "branch"
  c = "commit"
  cl = "clone"
  cp = "cherry-pick"
  co = "checkout"
  d = "diff"
  f = "fetch"
  i = "update-index --skip-worktree"
  ix = "update-index --no-skip-worktree"
  l = "log"
  m = "merge"
  p = "push"
  pu = "pull --rebase"
  r = "rebase"
  rh = "reset HEAD"
  s = "status"
  st = "stash"
  t = "tag"

  staged = "diff --name-only --staged"
  unstaged = "diff --name-only"
  untracked = "ls-files --other --exclude-standard"
  ignored = "status --ignored"
[pull]
  rebase = true
[init]
  defaultBranch = master
